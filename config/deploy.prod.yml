 # Name of your application. Used to uniquely configure containers.
service: redistry-prod

# Name of the container image.
image: redistry-prod

# Deploy to these servers.
servers:
  web:
    - WEB_SERVER_IP

# If using something like Cloudflare, it is recommended to set encryption mode 
# in Cloudflare's SSL/TLS setting to "Full" to enable end-to-end encryption. 
proxy: 
  ssl: true
  host: HOST_NAME
  forward_headers: true

# Credentials for your image host.
registry:
  server: REGISTRY_SERVER
  username: AWS
  password:
    - KAMAL_REGISTRY_PASSWORD


# Configure builder setup.
builder:
  arch: amd64
  cache:
    type: gha
    options: mode=max
    image: app-build-cache
  dockerfile: "./Dockerfile"
  context: "./"


# SSHKit configuration
sshkit:
  pool_idle_timeout: 300

# Environment variables
env:
  secret:
    - KAMAL_REGISTRY_PASSWORD
    - REDIS_HOST
    - REDIS_PORT

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
env:
  clear:
    DB_HOST: redistry-prod-db
  # secret:
  #   - RAILS_MASTER_KEY

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
#
# ssh:
#   user: app

# Use a persistent storage volume.
#
# volumes:
#   - "app_storage:/app/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
# asset_path: /app/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
accessories:
  db:
    redis:
    image: redis:7.0
    host: HOST_NAME
    port: "127.0.0.1:6379:6379"
    directories:
      - data:/data
